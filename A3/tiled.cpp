#include <cuda.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <math.h>

// Number of rows in the first input matrix
#define M 512

// Number of columns in the first input matrix
#define N 512

#define TILE_SIZE 32

// Dimensions of the input matrices: (M, N) and (N, M)

__global__ void TiledMatMul(int *A, int *B, int *C)
{
    __shared__ float tiled_A[TILE_SIZE][TILE_SIZE];
    __shared__ float tiled_B[TILE_SIZE][TILE_SIZE];

    int bx = blockIdx.x;
    int by = blockIdx.y;
    int tx = threadIdx.x;
    int ty = threadIdx.y;

    int row = by * blockDim.y + ty;
    int col = bx * blockDim.x + tx;

    int cVal = 0;

    for (int t = 0; t < (M - 1) / TILE_SIZE + 1; ++t)
    {
        if (row < M && (t * TILE_SIZE + tx) < N)
            tiled_A[ty][tx] = A[row * N + t * TILE_SIZE + tx];
        else
            tiled_A[ty][tx] = 0;

        if ((t * TILE_SIZE + ty) < N && col < M)
            tiled_B[ty][tx] = B[(t * TILE_SIZE + ty) * M + col];
        else
            tiled_B[ty][tx] = 0;
        __syncthreads();

        for (int i = 0; i < TILE_SIZE; ++i)
            cVal += (tiled_A[ty][i] * tiled_B[i][tx]);
        __syncthreads();

        if (row < M && col < M)
            C[row * M + col] = cVal;    
    }
}


void CPUMatMul(int A[M][N], int B[N][M], int C[M][M])
{

    for (int row = 0; row < M; ++row)
    {
        for (int col = 0; col < M; ++col)
        {
            int prod_val = 0;
            for (int k = 0; k < N; ++k)
            {
                prod_val = prod_val + (A[row][k] * B[k][col]);
            }
            C[row][col] = prod_val;
        }
    }
}

bool compare(int A[M][M], int B[M][M], double accuracy)
{
    for (int i = 0; i < M; ++i)
    {
        for (int j = 0; j < M; ++j)
            if ((abs(A[i][j] - B[i][j])) > accuracy)
                return 0;
    }

    return 1;
}

int main()
{
    printf("\n\nProgram to perform Matrix Multiplication in CUDA\n\n");

    int *A, *B, *C;
    int host_A[M][N], host_B[N][M], host_C[M][M], CPUMatMulAns[M][M];

    // generate random int numbers for input
    printf("\nGenerating %d int numbers for the input arrays....\n", N * M);
    int i, j;
    for (i = 0; i < M; ++i)
    {
        for (j = 0; j < N; ++j)
            host_A[i][j] = sin(i) + sin(j);
    }

    for (i = 0; i < N; ++i)
    {
        for (j = 0; j < M; ++j)
            host_B[i][j] = cos(i) + cos(j);
    }

    CPUMatMul(host_A, host_B, CPUMatMulAns);

    printf("\nAllocating memory on the GPU...\n\n");
    // allocate space on device
    cudaMalloc((void **)&A, M * N * sizeof(int));
    cudaMalloc((void **)&B, M * N * sizeof(int));
    cudaMalloc((void **)&C, M * M * sizeof(int));

    // memory transfer from host to device
    printf("\nTransferring data from host to device for computations...\n\n");

    cudaMemcpy(A, host_A, M * N * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(B, host_B, M * N * sizeof(int), cudaMemcpyHostToDevice);

    // dimensions of thread block + kernel launch
    dim3 blockDim(TILE_SIZE, TILE_SIZE, 1);

    dim3 gridDim((int)ceil((float)(M) / blockDim.x), (float)ceil((int)(N) / blockDim.y), 1);

    printf("\n\nCalling the kernel with %d Blocks and %d threads in each block\n", gridDim.x * gridDim.y, blockDim.x * blockDim.y);

    // timing the GPU kernel
    double t1 = clock();

    TiledMatMul<<<gridDim, blockDim>>>(A, B, C);
    cudaDeviceSynchronize();
    double t2 = clock();

    // copy back to host
    printf("\n\nCalculation completed on the GPU. Fetching the answer back from the GPU's global memory\n");
    cudaMemcpy(host_C, C, M * M * sizeof(int), cudaMemcpyDeviceToHost);

    // checking of the required accuracy is attained
    double accuracy = pow(10, -2);
    if (compare(CPUMatMulAns, host_C, accuracy))
        printf("The answers generated by GPU are within %lf accuracy\n\n", accuracy);

    else
        printf("The answers generated by GPU are NOT within %lf accuracy\n\n", accuracy);

    // free the malloc'ed memory
    printf("\n\nFree'ing the malloc'ed memory on the GPU\n");
    cudaFree(A);
    cudaFree(B);
    cudaFree(C);

    return 0;
}
